<?xml version="1.0" encoding="utf-8" ?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 加载db.properties文件中的内容 中的key要有一定的规则 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 引入属性文件 -->
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>

    <!-- 配置数据源1 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--
        默认值：无
        说明：配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。
        如果没有配置，将会生成一个名字，格式是："DataSource-" + System.identityHashCode(this).
        另外配置此属性至少在1.0.5版本中是不起作用的，强行设置name会出错。
        -->
        <property name="name" value="dataSource" />

        <!--
        默认值：无
        说明：连接数据库的url，不同数据库不一样。例如：
        mysql : jdbc:mysql://10.20.153.104:3306/druid2
        oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto
        -->
        <property name="url" value="${jdbc.url}" />

        <!--
        默认值：无
        说明：连接数据库的用户名
        -->
        <property name="username" value="${jdbc.username}" />

        <!--
        默认值：无
        说明：连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。
        -->
        <property name="password" value="${jdbc.password}" />

        <!--
        默认值：根据url自动识别
        说明：这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName。
        -->
        <!--<property name="driverClassName" value="${jdbc.password}" />-->

        <!--
        默认值：0
        说明：初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时。
        -->
        <property name="initialSize" value="0" />

        <!--
        默认值：8
        说明：连接池最大使用连接数量
        -->
        <property name="maxActive" value="50" />

        <!--
        默认值：无
        说明：最小连接池数量
        -->
        <property name="minIdle" value="5" />

        <!--
        默认值：无
        说明：获取连接时最大等待时间，单位毫秒。
        配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
        -->
        <property name="maxWait" value="60000" />

        <!--
        默认值：false
        说明：是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
        -->
        <property name="poolPreparedStatements" value="false" />

        <!--
        默认值：-1
        说明：要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
        在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
        -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="-1" />

        <!--
        默认值：无
        说明：用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
        如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
        -->
        <property name="validationQuery" value="${validationQuery.sql}" />

        <!--
        默认值：无
        说明：单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
        -->
        <property name="validationQueryTimeout" value="60" />

        <!--
        默认值：true
        说明：申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        -->
        <property name="testOnBorrow" value="false" />

        <!--
        默认值：false
        说明：归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        -->
        <property name="testOnReturn" value="false" />

        <!--
        默认值：false
        说明：建议配置为true，不影响性能，并且保证安全性。
        申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        -->
        <property name="testWhileIdle" value="true" />

        <!--
        默认值：1分钟（1.0.14）
        说明：有两个含义：
            1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
            2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
        -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!--
        默认值：无
        说明：连接保持空闲而不被驱逐的最小时间，单位是毫秒
        -->
        <property name="minEvictableIdleTimeMillis" value="300000" />


        <!-- 开启Druid的监控统计功能 -->
        <property name="filters" value="stat" />

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="3600" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!-- Oracle连接是获取字段注释 -->
        <property name="connectProperties">
            <props>
                <prop key="remarksReporting">true</prop>
            </props>
        </property>
    </bean>

    <!-- 通过Spring风格构建Mybatis的SqlSessionFactory -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">

        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="typeAliasesPackage" value="com.hhxx.spring.mybatis.entity"></property>
        <property name="mapperLocations" value="classpath:mapper/*-mapper.xml"></property>
    </bean>


    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.hhxx.spring.mybatis.dao" />
    </bean>
</beans>